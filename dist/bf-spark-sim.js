!function(t){var e={};function r(i){if(e[i])return e[i].exports;var o=e[i]={i:i,l:!1,exports:{}};return t[i].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=t,r.c=e,r.d=function(t,e,i){r.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:i})},r.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=3)}([function(t,e){var r;r=function(){return this}();try{r=r||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(r=window)}t.exports=r},function(t,e,r){(function(e){var r;r="function"==typeof Array.prototype.indexOf?function(t,e){return t.indexOf(e)}:function(t,e){for(var r=0,i=t.length,o=-1,s=!1;r<i&&!s;)t[r]===e&&(o=r,s=!0),r++;return o};var i=function(){this.events={}};i.prototype.on=function(t,e){"object"!=typeof this.events[t]&&(this.events[t]=[]),this.events[t].push(e)},i.prototype.removeListener=function(t,e){var i;"object"==typeof this.events[t]&&(i=r(this.events[t],e))>-1&&this.events[t].splice(i,1)},i.prototype.emit=function(t){var e,r,i,o=[].slice.call(arguments,1);if("object"==typeof this.events[t])for(i=(r=this.events[t].slice()).length,e=0;e<i;e++)r[e].apply(this,o)},i.prototype.once=function(t,e){this.on(t,function r(){this.removeListener(t,r),e.apply(this,arguments)})};try{t.exports=i}catch(t){}try{window.EventEmitter=i}catch(t){}try{self.EventEmitter=i}catch(t){}try{e.EventEmitter=i}catch(t){}}).call(this,r(0))},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e,r){(function(t,e){const i=r(1),o={1:{"top-left":15,"top-right":30,"middle-left":20,"middle-right":40,"bottom-left":18,"bottom-right":33},2:{"top-left":13,"top-right":24,"middle-left":16,"middle-right":33,"bottom-left":15,"bottom-right":27},3:{"top-left":10,"top-right":19,"middle-left":13,"middle-right":26,"bottom-left":12,"bottom-right":21},4:{"top-left":7,"top-right":14,"middle-left":9,"middle-right":19,"bottom-left":8,"bottom-right":15},5:{"top-left":4,"top-right":9,"middle-left":6,"middle-right":12,"bottom-left":5,"bottom-right":9}},s={ezra:19,arthur:11,zeis:25,ciara:32,kalon:48,neferet:34,gabriela:30,mariela:43,zenia:21,carrol:23,zalvard:17,diastima:21,licht:15,beatrix:23,mard:20};class n{constructor(t={}){this.movespeedOffsets=t.movespeedOffsets||o,this.teleporterData=t.teleporterData||s,this.getUnitFn=t.getUnit,this.sbbFrameDelay=2,this.eventEmitter=new i}on(t,e){this.eventEmitter.on(t,e)}onProgress(t){this.on("progress",t)}async getUnit(t){return await Promise.resolve(this.getUnitFn(t))}static getPositionIndex(t=""){return["top-left","top-right","middle-left","middle-right","bottom-left","bottom-right"].indexOf(t)}getTeleporterOffset(t){const e=Object.keys(s).filter(e=>t.name.toLowerCase().indexOf(e)>-1)[0];return s[e]||0}getOriginalFramesForUnit(t,e){const r=["1","13","14","27","28","29","47","61","64","75","11000"].concat(["46","48","97"]),i=t[e]["damage frames"],o=+t.movement.skill["move type"],s=(3===o?+t.movement.skill["move speed"]:0)+(2==+o?this.getTeleporterOffset(t):0);let n=!0;return i.filter(t=>r.indexOf(t["proc id"].toString())>-1).map(t=>{const e=+t["effect delay time(ms)/frame"].split("/")[1],r={};return t["frame times"].forEach(t=>{r[+t+(2===o?0:e)+s]=n?"aoe":"st"}),n=!1,r})}async getUnitData(t={}){const e=await this.getUnit(t.id);return{name:e.name,moveType:+e.movement.skill["move type"],speedType:e.movement.skill["move speed type"].toString(),originalFrames:this.getOriginalFramesForUnit(e,t.type||"sbb")}}getBattleFrames(t={}){if("X"===t.id||"E"===t.id)return{};const e=t.position,{name:r,moveType:i,speedType:s,originalFrames:n}=t.unitData,a=(+t.bbOrder-1)*this.sbbFrameDelay+(1===i?o[s][e]:0);t.alias=t.alias||r;const l={};return n.forEach(t=>{Object.keys(t).forEach(e=>{const r=+e+a;l[r]||(l[r]={aoe:0,st:0}),l[r][t[e]]+=1})}),l}processSquad(t=[],e=6){const r={};t.forEach(t=>{const e=this.getBattleFrames(t);Object.keys(e).forEach(t=>{r[+t]||(r[+t]={aoe:0,st:0}),r[+t].aoe+=e[t].aoe,r[+t].st+=e[t].st}),t.battleFrames=e});let i=0,o=0;const s=t.map(t=>{let s=Object.keys(t.battleFrames).map(r=>t.battleFrames[+r].aoe*e+t.battleFrames[+r].st).reduce((t,e)=>t+e,0),n=Object.keys(t.battleFrames).map(i=>{const{aoe:o,st:s}=r[+i],[n,a]=[o-t.battleFrames[i].aoe,s-t.battleFrames[i].st],l=t.battleFrames[i].aoe>0&&n>0,c=t.battleFrames[i].st>0&&a>0||t.battleFrames[i].st>0&&n>0||t.battleFrames[i].aoe>0&&a>0&&!l;let h=0;return l&&(h+=t.battleFrames[i].aoe*e),c&&(h+=Math.max(t.battleFrames[i].st,1)),h}).reduce((t,e)=>t+e,0);i+=s,o+=n;return{id:t.id,alias:t.alias||{X:"(Any)",E:"(Empty)"}[t.id],position:t.position,bbOrder:t.bbOrder,type:t.type,actualSparks:n,possibleSparks:s}}),n=s.filter(t=>t.possibleSparks>0).map(t=>t.actualSparks/t.possibleSparks),a=n.map(t=>t*(1/n.length)).reduce((t,e)=>t+e,0);return{actualSparks:o,possibleSparks:i,weightedPercentage:a,squad:s}}getAllPermutations(t=[]){const e=[];return 1===t.length?(e.push(t),e):(t.forEach((r,i)=>{const o=t.slice(0,i).concat(t.slice(i+1,t.length));this.getAllPermutations(o).forEach(t=>{e.push([r].concat(t))})}),e)}findBestOrders(t=[],e=.5){const r=[1,2,3,4,5,6],i=[],o=[];t.forEach(t=>{!isNaN(t.bbOrder)&&r.indexOf(t.bbOrder)>-1?i.push(t):o.push(t)});const s=i.map(t=>+t.bbOrder),n=r.filter(t=>-1===s.indexOf(t)),a=this.getAllPermutations(n);let l=[];if(a.length>0)a.forEach(t=>{const r=t.map((t,e)=>{if(o[e])return{...o[e],bbOrder:t}}).filter(t=>!!t).concat(i),s=this.processSquad(r);s.weightedPercentage>=e&&l.push(s)});else{const t=this.processSquad(i);t.weightedPercentage>=e&&l.push(t)}return l.sort((t,e)=>e.weightedPercentage-t.weightedPercentage).slice(0,10)}findBestPositions(t=[],e=.5){const r=["top-left","top-right","middle-left","middle-right","bottom-left","bottom-right"],i=[],o=[];t.forEach(t=>{t.position&&r.indexOf(t.position)>-1?i.push(t):o.push(t)});const s=i.map(t=>t.position),n=r.filter(t=>-1===s.indexOf(t)),a=this.getAllPermutations(n);let l=0,c=[];if(a.length>0)a.forEach(t=>{const r=t.map((t,e)=>{if(o[e])return{...o[e],position:t}}).filter(t=>!!t).concat(i);this.findBestOrders(r,e).forEach(t=>{t.weightedPercentage>=e&&c.push(t)});const s=++l/a.length*100,n=`Finding Positions: ${s}% complete (${a.length-l} remaining)`;this.eventEmitter.emit("progress",{percentComplete:s,complete:l,total:a.length,message:n})});else{this.findBestOrders(i,e).forEach(t=>{t.weightedPercentage>=e&&c.push(t)})}return c.sort((t,e)=>e.weightedPercentage-t.weightedPercentage).slice(0,10)}async preProcessSquad(t=[]){const e=t.filter(t=>"X"===t.id),r=t.filter(t=>"E"===t.id);if(!Array.isArray(t))throw Error("Input must be an array");if(6!==t.length)throw Error("Squad length must be 6");if(e.length+r.length>4)throw Error("Must have at least 2 actual units in squad");if(r.filter(t=>!t.position).length>1)throw Error("Must have position satisfied for every empty unit");const i=[];t.forEach(t=>{if("X"!==t.id&&"E"!==t.id){const e=this.getUnitData(t).then(e=>{t.unitData=e});i.push(e)}});try{await Promise.all(i)}catch(t){throw t}}async run(t=[],e={}){const{threshold:r,sortResults:i}=e;await this.preProcessSquad(t);const o=this.findBestPositions(t,r);return i&&o.forEach(t=>{t.squad.sort((t,e)=>n.getPositionIndex(t.position)-n.getPositionIndex(e.position))}),o}}t&&t.exports&&(t.exports=n);try{window.SparkSimulator=n}catch(t){}try{self.SparkSimulator=n}catch(t){}try{e.SparkSimulator=n}catch(t){}}).call(this,r(2)(t),r(0))}]);